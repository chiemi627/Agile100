= ふりかえり手法を選定してみる

//flushright{
yumechi
//}

== アジャイルを導入する前にふりかえりを導入してみる

本題に入る前に本章の背景を説明します。

私が所属するチームでは、ウォーターフォールで開発を進めています。
ウォーターフォールになっている理由としては、自分がプロジェクトに参加する前からチームメンバーが慣れた方法でやっていたこと、また小出しにするのが難しいものを扱わなければならないことの２点があります。
これらの理由により、このプロジェクトでウォーターフォールを選んだことは適切でした。

将来的にはプランナー、エンジニアが一丸となって、アジャイルに開発していきたいという思いもあります。
この思いは私自身だけでなくマネジメントレイヤの方も同様の思いであり、認識を合わせながらアジャイルに開発するための計画を立てています。

しかし、ウォーターフォールに慣れたメンバーが突然アジャイルをやる、というのは難しいです。
私は前職の経験や個人的な学習を活かし、まずはチームで毎週やっている定期ミーティングにふりかえりを導入してみました。
チームメンバーの人数は時期によって変動していますが、私を含めて４～６名です。

== ふりかえり手法にこだわる

私が所属するチームのふりかえりの目的は下記の3つです。

 * 課題を発見する
 * 成長を感じたい
 * 課題、成長を共通認識にしてチームの気持ちや方向性を統一する

ふりかえりと聞いて、まずはKPTやYWTを思い浮かべた読者も多いかと思います。
しかし私の経験上、これらのやり方は今回のチームにはマッチしないと考えました。

 * KPT
 ** メリット
 *** よく知られている
 *** 学習コストが小さくて済む
 *** Keep, Problemに対するTryと関係が結びやすい
 ** デメリット
 *** 正しくKPTに乗っ取って運用できていないケースが多い
 *** Problemばかりが出てきやすく、後ろ向きになりやすい
 *** Problemに「～しなかった」というアンチパターンが記載されやすい
 *** Tryに漠然とした不安が上がることがあり、大きすぎる課題の場合は着手する意欲がなくなりやすい
 ** 総論として間違った使われ方をするケースが多く、個人的につらい
 * YWT
 ** メリット
 *** KPTほどではないが、それなりに知られている
 *** 学習コストは小さくて済む
 *** やったことや理解したことを元に、前向きにふりかえりができる
 ** デメリット
 *** フレームワークの性質として、課題点の発見・紐づきが弱い
 *** 課題の発見が弱いことから、管理者視点だと遊びっぽく見えてしまう
 *** 感想みたいなものが増えてくると、いい加減になる場合もある
 ** 総論として目的とするチームの課題発見ができず、今のチームにそぐわない

個人的によく知られた手法というのは、正しいかどうかというより経験側で間違ったまま運用されてしまうという問題もこれまでの人生経験から感じていました。
そのため今回は目的に沿って新しいふりかえりに挑戦したく、いろいろ調べました。


//footnote[ふりかえりカタログ][ふりかえりカタログ / Retrospective Catalog @<href>{https://speakerdeck.com/viva_tweet_x/retrospective-catalog-59bd3a29-314c-45dd-911b-f8e5f1308333}]

一番参考になったのが森一樹(@viva_tweet_x)さんが公開されているふりかえりカタログ@<fn>{ふりかえりカタログ}でした。
チームメンバーの中で案を出し合い、候補を選びました。その中の一部は下記のようになります。

 * Starfish
 * Fun / Done / Learn
 * Good, Bad, Ideas, Actions
 * 4Ls
 * FLAP

//footnote[Starfish][Starfish / FunRetrospectives @<href>{https://www.funretrospectives.com/starfish/}]

チーム内で総意を取ってまずはStarfish@<fn>{Starfish}を選びました。

== Starfishをやってみる

Starfishについて簡単に説明します。
ふりかえりカタログやFunRetrospectivesの情報をベースに、実際にチームで使っているボードを再現してみました。

//image[starfish][Starfishのボード][scale=0.5]

各項目についてはわかりやすいように日本語で書いてみました。
ポジティブな関連、ネガティブな関連を矢印で示しています。

Starfishの良いところは「やめること」が明確に定義されているところです。
私の体験したKPTではTryにやらなかったことをやるべきだ、ということが書かれやすい部分があり、課題感のある慣習が改善されにくく感じました。
Starfishでは「やめること」が明確に定義されることにより、「はじめること」だけでなく「やめること」に対してもアクションをする意識が生まれやすかったです。

== ふりかえりの向き直り

Starfishでのふりかえりは順調に思われましたが、一方で下記の問題がわかりました。

 * 「増やしたいこと」「減らしたいこと」に本質的に同じ内容が書かれやすい
 ** どこに書くべきかがチームメンバーにとって難しすぎたかもしれない
 * 経験したことや成長したことがわかりづらい
 * 途中からボードにふせんを残したが、その結果ふりかえりが雑になることがあった
 ** 手法の問題ではないが、進行の問題があった
 * 慣れからかふりかえりが雑になることがあった

若いメンバー中心のチームだったので、経験したことや成長したことを明確にしたほうが今後の活動や自信にも繋がると思いました。
私はその点について、ふりかえりできていないことを特に問題と感じていました。
そのため、当初の目的の「成長点を発見したい」をもう少し強めつつ、ふりかえり手法を再選定しました。

//footnote[FLAP][FLAP / FunRetrospectives @<href>{https://www.funretrospectives.com/flap/}]

その結果、チームの総意としてFLAP@<fn>{FLAP}に変えてみました。

== FLAPに変えてみる

Starfishについて簡単に説明します。
ふりかえりカタログやFunRetrospectivesの情報をベースに、実際にチームで使っているボードを再現してみました。

//image[flap][FLAPのボード][scale=0.5]

各項目についてはわかりやすいように日本語で書いてみました。
ふりかえりカタログやFunRetrospectivesで紹介されているものからの変更点として、「将来の懸念」に対する「アクション」を明確に定義しています。
これはチーム内で実際にアクションしていくことをタスクに落としたいという思いがあり、このような変更を加えました。

FLAPの良い点は実際にやった成果ベースで、成長点や課題点を出せるところです。
チームとして、エンジニアとして、できるようになったことを明確に理解することは大事なことです。
YWTのようなFunの要素もあり、成長できたことをシェアできるのは良いことだと感じています。

一方、課題点、将来の懸念点も明確にできるのがFLAPの良さといえます。
成果から課題を出すことで、活動に裏打ちされた本質的な課題が出やすくなったと感じています。
チームでのふりかえりでは、成果・学び・課題を先に記載し、ふりかえりの時間で将来の懸念を話すようにしているのですが、課題を集約して大きな課題を将来の懸念を出していく、というふりかえりの流れもうまく作用しています。

工夫した点である「アクション」も「将来の懸念」を放置することなく、一時対処ではありますが、対策できているという実感があります。
課題点をそのままにせず活動していくことで、精神的な不安を取り除き、健全にプロジェクトを進めていくことに貢献できていると感じています。

メンバーからの感想として「学び」があることで、自分の成長ポイントがわかりやすくなったことだけでなく、思っていることではなく実績ベースで話すことができるのでやりやすいという話が上がりました。
自分自身としてもKPTとYWTの課題点をある程度解決しつつ、良いフレームワークを見つけることができたと思っています。


== 終わりに

紆余曲折あった後、ふりかえりの目的を達成するために考え抜いた結果、現在のチームではFLAPに落ち着きました。
しかし、メンバーの変化やフェーズの変化によって、ふりかえりの目的も変化していきます。
変化に応じて、ふりかえりの手法・進め方も見直ししていきたいです。

また、自分の中ではKPT, YWTに納得できてなかった部分を解決できるフレームワークが見つかり、嬉しく思います。
今後もふりかえりの目的に合わせて、さまざまなフレームワークを試し、効率的なふりかえりを実現していきたいです。

詳細に聞きたい方はツイッターまで。

　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/white.png}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        yumechi https://twitter.com/\_\_yumechi\\
        \end{minipage}
    \hspace{1ex}
//}


バックエンドのエンジニアやってます。アジャイルが好きなので、調べたりチームに手法を導入したりして、全体のプロセスをよくできるようにも頑張ってます。
